<!-- jQuery -->
<script src="public/plugins/jquery/jquery.min.js"></script>
<!-- jQuery UI 1.11.4 -->
<script src="public/plugins/jquery-ui/jquery-ui.min.js"></script>
<!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
<script>
	$.widget.bridge('uibutton', $.ui.button)
</script>
<!-- Bootstrap 4 -->
<script src="public/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- ChartJS -->
<script src="public/plugins/chart.js/Chart.min.js"></script>
<!-- Sparkline -->
<script src="public/plugins/sparklines/sparkline.js"></script>
<!-- JQVMap -->
<script src="public/plugins/jqvmap/jquery.vmap.min.js"></script>
<script src="public/plugins/jqvmap/maps/jquery.vmap.usa.js"></script>
<!-- jQuery Knob Chart -->
<script src="public/plugins/jquery-knob/jquery.knob.min.js"></script>
<!-- daterangepicker -->
<script src="public/plugins/moment/moment.min.js"></script>
<script src="public/plugins/daterangepicker/daterangepicker.js"></script>
<!-- Tempusdominus Bootstrap 4 -->
<script src="public/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
<!-- Summernote -->
<script src="public/plugins/summernote/summernote-bs4.min.js"></script>
<!-- overlayScrollbars -->
<script src="public/plugins/overlayScrollbars/js/jquery.overlayScrollbars.min.js"></script>
<!-- AdminLTE App -->
<script src="public/dist/js/adminlte.js"></script>
<!-- AdminLTE for demo purposes -->
<script src="public/dist/js/demo.js"></script>
<!-- Custom Script -->
<script>

	function showTab(index) {
		const tabLinks = document.querySelectorAll('#custom-tabs-one-tab .nav-link');
		const tabContents = document.querySelectorAll('#custom-tabs-one-tabContent .tab-pane');

		// Check if the index is valid
		if (index < 0 || index >= tabLinks.length) {
			console.error("Tab or content with index", index, "not found");
			return;
		}

		// Remove active class from all tabs and contents
		tabLinks.forEach((link) => link.classList.remove('active'));
		tabContents.forEach((content) => content.classList.remove('active', 'show'));

		// Add active class to the selected tab and content
		tabLinks[index].classList.add('active');
		tabContents[index].classList.add('active', 'show');
	}

	// Function to display all tabs
	function showAllTabs() {
		const navItems = document.querySelectorAll('.nav-item');
		navItems.forEach(item => {
			item.classList.remove('invisible');
		});

		// Set the first tab as active by default
		showTab(0);
	}

	function showTabById(tabId) {
		const tabLinks = document.querySelectorAll('#custom-tabs-one-tab .nav-link');
		const tabContents = document.querySelectorAll('#custom-tabs-one-tabContent .tab-pane');

		// Remove active class from all tabs and contents
		tabLinks.forEach((link) => link.classList.remove('active'));
		tabContents.forEach((content) => content.classList.remove('active', 'show'));

		// Find the tab link and content using the ID
		const targetLink = Array.from(tabLinks).find(link => link.getAttribute('href') === `#${tabId}`);
		const targetContent = document.getElementById(tabId);

		if (targetLink && targetContent) {
			targetLink.classList.add('active');
			targetContent.classList.add('active', 'show');
		} else {
			console.error(`Tab or content with ID ${tabId} not found`);
		}
	}

	// Functions to show specific tabs by their IDs
	function showForm1() {
		showTabById('custom-tabs-one-gerenal-details');
	}

	function showForm2() {
		showTabById('custom-tabs-one-requestor-details');
	}

	function showForm3() {
		showTabById('custom-tabs-one-firewall-details');
    }

    function showForm4() {
        showTabById('custom-tabs-one-terms');
    }



	// Call showAllTabs on page load or after redirection
	window.addEventListener('DOMContentLoaded', () => {
		showAllTabs();
	});


    let rowCount = 0;

document.addEventListener('DOMContentLoaded', () => {
    // Add a default row if needed
    addRow();
});

function addRow() {
    rowCount++; // Use rowCount instead of undefined serverRowCount
    const table = document.getElementById("dynamicTable").getElementsByTagName('tbody')[0];
    const newRow = table.insertRow();

    newRow.innerHTML = `
        <td>${rowCount}.</td>
        <td><input type="text" name="from[]" required placeholder="From (Source)" class="form-control"></td>
        <td><input type="text" name="to[]" required placeholder="To (Destination)" class="form-control"></td>
        <td><input type="text" name="portNum[]" required placeholder="Port Number" class="form-control"></td>
        <td><input type="text" name="serviceReq[]" required placeholder="Service Required" class="form-control"></td>
        <td><select name="reqDetails[]" class="form-control" required>
        <option value="">Select</option>
        <option value="temporary">Temporary</option>
        <option value="permanent">Permanent</option>
        </select></td>
        <td>
            <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button> 
        </td>
    `;

    updateRowNumbers();
}

function removeRow(button) {
    const row = button.parentNode.parentNode;
    row.parentNode.removeChild(row);

    updateRowNumbers();
}

function updateRowNumbers() {
    const rows = document.getElementById("dynamicTable").getElementsByTagName('tbody')[0].rows;

    for (let i = 0; i < rows.length; i++) {
        rows[i].cells[0].innerText = `${i + 1}.`;
    }

    rowCount = rows.length;
}

// Ensure logout button exists before adding an event listener
const logoutButton = document.getElementById('logoutBtn');
if (logoutButton) {
    logoutButton.addEventListener('click', async () => {
        try {
            await fetch('/logout', { method: 'GET', credentials: 'include' });
            window.location.href = '/'; // Redirect to login page
        } catch (error) {
            console.error('Logout failed:', error);
        }
    });
}



async function submitFirewallForm() {
    const formData = new FormData();
    let hasErrors = false;

    // Validate and append Application Name
    const appName = document.getElementById("appName");
    if (!appName || !appName.value.trim()) {
        showAlert("You must fill in the appName in the General Details field.", "warning");
        hasErrors = true;
    } else {
        formData.append("appName", appName.value.trim().toUpperCase());
    }

    // Validate and append URL
    const url = document.getElementById("url");
if (!url || !url.value.trim()) {
    showAlert("You must fill in the URL in the General Details field.", "warning");
    hasErrors = true;
} else if (!url.value.trim().toLowerCase().startsWith("https://")) {
    showAlert("URL must start with 'https://'.", "warning");
    hasErrors = true;
} else {
    formData.append("url", url.value.trim());
}


    // Validate and append Private IP
    const privateIpAddrss = document.getElementById("privateIpAddrss");
if (!privateIpAddrss || !privateIpAddrss.value.trim()) {
    showAlert("You must fill in the Private IP Address in the General Details field.", "warning");
    hasErrors = true;
} else {
    const ip = privateIpAddrss.value.trim();
    const regex = /^(192\.168|10\.192)\.(\d{1,3})\.(\d{1,3})$/;
    const match = ip.match(regex);

    if (!match) {
        showAlert("Invalid IP format. Allowed formats: 192.168.X.Y or 10.192.X.Y", "warning");
        hasErrors = true;
    } else {
        const x = parseInt(match[2], 10);
        const y = parseInt(match[3], 10);

        if (x < 1 || x > 255 || y < 1 || y > 255) {
            showAlert("The last two octets of the IP must be between 1 and 255.", "warning");
            hasErrors = true;
        } else {
            formData.append("privateIpAddrss", ip);
        }
    }
}



    // Validate and append public IP Address
    const publicIpAddrss = document.getElementById("publicIpAddrss");
if (!publicIpAddrss || !publicIpAddrss.value.trim()) {
    showAlert("You must fill in the Public IP Address in the General Details field.", "warning");
    hasErrors = true;
} else {
    const ip = publicIpAddrss.value.trim();
    const regex = /^164\.100\.233\.(\d{1,3})$/;
    const match = ip.match(regex);

    if (!match) {
        showAlert("Invalid Public IP. Only allowed format: 164.100.233.X", "warning");
        hasErrors = true;
    } else {
        const x = parseInt(match[1], 10);
        if (x < 1 || x > 255) {
            showAlert("The last octet of the Public IP must be between 1 and 255.", "warning");
            hasErrors = true;
        } else {
            formData.append("publicIpAddrss", ip);
        }
    }
}


    // Validate and append  Name
    const name = document.getElementById("name");
    if (!name || !name.value.trim()) {
        showAlert("You must fill in the Name in the Requestor's Details field.", "warning");
        hasErrors = true;
    } else {
        formData.append("name", name.value.trim());
    }

    // Validate and append Email 
    const email = document.getElementById("email");
    if (!email || !email.value.trim()) {
        showAlert("You must fill in the Email in the Requestor's Details field.", "warning");
        hasErrors = true;
    } else {
        formData.append("email", email.value.trim());
    }

    // Validate and append Contact Phone Number
    const contactNum = document.getElementById("contactNum");
    if (!contactNum || !contactNum.value.trim()) {
        showAlert("You must fill in the Contact Number in the Requestor's Details field.", "warning");
        hasErrors = true;
    } else {
        formData.append("contactNum", contactNum.value.trim());
    }



    // Validate and append multiple Server Details
    const Rows = document.getElementById('dynamicTable').getElementsByTagName('tbody')[0].rows;
    for (let i = 0; i < Rows.length; i++) {
        const row = Rows[i];

        const from = row.querySelector('input[name="from[]"]').value.trim();
        const to = row.querySelector('input[name="to[]"]').value.trim();
        const portNum = row.querySelector('input[name="portNum[]"]').value.trim();
        const serviceReq = row.querySelector('input[name="serviceReq[]"]').value.trim();
        const reqDetails = row.querySelector('input[name="reqDetails[]"]').value.trim();

        if (!from) {
            showAlert("You must fill in the Server IP in Server Details.", "warning");
            hasErrors = true;
        } else {
            formData.append("from[]", from);
        }

        if (!to) {
            showAlert("You must fill in the Server Location in Server Details.", "warning");
            hasErrors = true;
        } else {
            formData.append("to[]", to);
        }

        if (!portNum) {
            showAlert("You must fill in the Server Port in Server Details.", "warning");
            hasErrors = true;
        } else {
            formData.append("portNum[]", portNum);
        }

        if (!serviceReq) {
            showAlert("You must fill in the Server Description in Server Details.", "warning");
            hasErrors = true;
        } else {
            formData.append("serviceReq[]", serviceReq);
        }
        if (!reqDetails) {
            showAlert("You must fill in the Server Description in Server Details.", "warning");
            hasErrors = true;
        } else {
            formData.append("reqDetails[]", reqDetails);
        }
    }

      // Ensure terms and conditions are accepted before proceeding
      if (acceptTerms.checked) {
    formData.append("acceptTerms", "true");
    } else {
    showAlert("You must accept the terms and conditions before submitting the form.", "warning");
    hasErrors = true;
    }



    // Stop submission if errors exist
    if (hasErrors) return;


    try {
    const response = await fetch('http://localhost:5000/submit-firewall-endpoint', {
        method: 'POST',
        body: formData,
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Error ${response.status}: ${errorText}`);
    }

    // Parse response JSON
    const responseData = await response.json();

    if (responseData.redirectUrl) {
    // Show success message first
    showAlert("Firewall Form submitted successfully! Redirecting...", "success");

    // Delay redirect for 2 seconds
    setTimeout(() => {
        window.location.href = responseData.redirectUrl;
    }, 2000); // 2000ms = 2 seconds
} else {
    showAlert("VPN Form submitted successfully!", "success");
}

    }catch (error) {
    console.error("Firewall Form submission error:", error);
    showAlert("Error submitting the Firewall form. Please try again.", "error");
}
}



    

	function showAlert(displayText, alertType = 'warning') {

		switch (alertType) {
			case 'info':
				toastr.info(displayText);
				break;
			case 'success':
				toastr.success(displayText);
				break;
			case 'warning':
				toastr.warning(displayText);
				break;
			case 'error':
				toastr.error(displayText);
				break;
			default:
				toastr.warning(displayText);
				break;
		}

	}
    

</script>
<footer class="main-footer" style="padding-left: 0; margin-left: 0; text-align: left;">
    <strong>&copy; 2024 Designed and developed by C-DAC Thiruvananthapuram</strong>
    All rights reserved.
    <div class="float-right d-none d-sm-inline-block">
      <b>Version</b> 1.0.0
    </div>
  </footer>
  